@using System.Text.Json
@{
    Layout = "~/Pages/Shared/_Layout.cshtml";
    ViewData["Title"] = "Dashboard";
    var role = User.IsInRole("Admin") ? "Admin" :
               User.IsInRole("Manager") ? "Manager" : 
               "User";

    var userDataJson = ViewData["UserData"]?.ToString();
    var user = !string.IsNullOrEmpty(userDataJson) 
        ? JsonDocument.Parse(userDataJson).RootElement 
        : default;
}


<section class="row mt-5 mb-5">
    <div class="col-left">
    <div class="mask-group-wrapper">
        <br><br>
        <img class="mask-group-icon" alt="" src="~/ManagerProfile.jpg">

    </div>
    <br><br>
    <div class="title">MANAGER</div>
    <br><br>
    <a href="#">
        <div class="task">SETTING</div>
    </a>

    </div>
    <div class ="col-right">
        <h2>@ViewData["Title"]</h2>

        @if (role == "Admin")
        {
            <p style="color: brown;">Welcome, Admin! You have full access to the application.</p>
        }
        else if (role == "Manager")
        {
            <p>Welcome, Manager! You have limited access compared to an Admin.</p>
        }
        else
        {
            <p>Welcome, User! This is your personal dashboard.</p>
        }
        <!-- User Creation Form -->
         <h3>Create New User</h3>
        <form id="createUserForm" onsubmit="createUser(event)" class="d-flex flex-column gap-3 md-2">
                <input type="text" id="email" placeholder="Email" required />
                <input type="text" id="firstName" placeholder="First Name" required />
                <input type="text" id="lastName" placeholder="Last Name" required />
                <input type="password" id="password" placeholder="Password" required />
                <button type="submit" class="btn" >Create User</button>
          </form>
        <!-- Load and Display Users -->
        <h3>All Users</h3>
        <button onclick="loadUsers()">Load Users</button>
        <table id="usersTable" border="1">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Email</th>
                    <th>Roles</th>
                    <th>Assign Role</th>
                    <th>Remove Role</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>

        <form method="post" action="/Admin/Logout" class="mt-3">
            @Html.AntiForgeryToken()  <!-- This token is required for security -->
            <button type="submit" class="mv-btn">Logout</button>
        </form>

    </div>
    </section>



<script>
    async function createUser(e) {
        e.preventDefault();
        const payload = {
            email: document.getElementById("email").value,
            firstName: document.getElementById("firstName").value,
            lastName: document.getElementById("lastName").value,
            password: document.getElementById("password").value
        };

        const res = await fetch('/api/admin/users', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });

        const data = await res.json();

        if (!res.ok) {
            let errorMessages = '';

            if (Array.isArray(data.errors)) {
                data.errors.forEach(err => {
                    errorMessages += `• ${err.description || err}\n`;
                });
            } else if (typeof data.errors === 'object') {
                for (const key in data.errors) {
                    const errorList = data.errors[key];
                    (Array.isArray(errorList) ? errorList : [errorList]).forEach(err => {
                        errorMessages += `• ${err}\n`;
                    });
                }
            }

            alert(errorMessages || data.message || "An error occurred.");
        } else {
            alert(data.message || "User created successfully.");
            loadUsers();
        }
    }

    async function loadUsers() {
        const res = await fetch('/api/admin/users');
        const users = await res.json();

        const tbody = document.querySelector("#usersTable tbody");
        tbody.innerHTML = '';

        for (const user of users) {
            const roles = await getUserRoles(user.id);
            const roleOptions = ['Admin', 'Manager', 'User']
                .filter(r => !roles.includes(r)) // exclude already assigned roles
                .map(r => `<option value="${r}">${r}</option>`).join('');

            const removeOptions = roles
                .map(r => `<option value="${r}">${r}</option>`).join('');

            tbody.innerHTML += `
                <tr>
                    <td>${user.id}</td>
                    <td>${user.email}</td>
                    <td>${roles.join(', ') || "None"}</td>
                    <td>
                        <select onchange="assignRoleToUser('${user.id}', this.value)">
                            <option disabled selected>Assign Role</option>
                            ${roleOptions}
                        </select>
                    </td>
                    <td>
                        <select onchange="removeRoleFromUser('${user.id}', this.value)">
                            <option disabled selected>Remove Role</option>
                            ${removeOptions}
                        </select>
                    </td>
                    <td>
                        <button onclick="deleteUser('${user.id}')">Delete</button>
                    </td>
                </tr>`;
        }
    }

    async function deleteUser(userId) {
        if (!confirm("Are you sure you want to delete this user?")) return;

        const res = await fetch(`/api/admin/users/${userId}`, {
            method: 'DELETE'
        });

        const result = await res.json();
        alert(result.message);
        loadUsers();
    }

    async function assignRoleToUser(userId, role) {
        const res = await fetch(`/api/admin/assign-role/${userId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(role)
        });

        const data = await res.json();

        if (res.ok) {
            alert(data.message || "Role assigned.");
            loadUsers();
        } else {
            let errorMsg = "Failed to assign role.\n";
            if (data.errors && Array.isArray(data.errors)) {
                data.errors.forEach(err => {
                    errorMsg += `• ${err.description || JSON.stringify(err)}\n`;
                });
            } else {
                errorMsg += data.message || "Unknown error";
            }
            alert(errorMsg);
        }
    }

    async function removeRoleFromUser(userId, role) {
        const res = await fetch(`/api/admin/remove-role/${userId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(role)
        });

        const data = await res.json();

        if (res.ok) {
            alert(data.message || "Role removed.");
            loadUsers();
        } else {
            alert(data.message || "Failed to remove role.");
        }
    }

    async function getUserRoles(userId) {
        try {
            const res = await fetch(`/api/admin/user-roles/${userId}`);
            const data = await res.json();
            return res.ok ? data.roles : [];
        } catch {
            return [];
        }
    }
</script>
