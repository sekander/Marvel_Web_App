@{
    Layout = "~/Pages/Shared/_Layout.cshtml";
    ViewData["Title"] = "Manager - Comic Manager";
}

<h2>@ViewData["Title"]</h2>

<!-- Form to Add a Comic -->
<h3>Add New Comic</h3>
<form id="addComicForm" onsubmit="addComic(event)">
    <input type="text" id="title" placeholder="Title" required />
    <input type="number" id="quantity" placeholder="Quantity" required />
    <input type="number" id="price" placeholder="Price" step="0.01" required />
    <button type="submit">Add Comic</button>
</form>

<hr />

<!-- Get Comic By ID -->
<h3>Get Comic By ID</h3>
<input type="number" id="comicIdInput" placeholder="Comic ID" />
<button onclick="getComicById()">Fetch Comic</button>
<p id="comicDetails"></p>

<hr />

<h3>Comics Inventory</h3>
<label>Start Index: <input type="number" id="startRange" value="0" min="0" /></label>
<label>End Index (max 50): <input type="number" id="endRange" value="49" min="0" max="49" /></label>
<button onclick="loadComics()">Load Comics</button>

<table border="1" id="comicTable">
    <thead>
        <tr>
            <th>ID</th><th>Title</th><th>Quantity</th><th>Actions</th>
        </tr>
    </thead>
    <tbody></tbody>
</table>

<form method="post" action="/Manager/Logout" class="mt-3">
    @Html.AntiForgeryToken()  <!-- This token is required for security -->
    <button type="submit" class="btn btn-danger">Logout</button>
</form>

<script>
    // Function to add a comic
    async function addComic(event) {
        event.preventDefault();
        console.log("Adding comic...");

        // Create the comic object with only the necessary properties
        const comic = {
            title: document.getElementById("title").value,
            quantity: parseInt(document.getElementById("quantity").value),
            price: parseFloat(document.getElementById("price").value) // Assuming price input exists
        };
        console.log("Comic object:", comic);

        // Send a POST request to the server to add the comic
        const res = await fetch('/api/manager/comics', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(comic)
        });

        const data = await res.json();
        alert(data.message);
        loadComics();  // Reload comics after adding a new one
    }

    // Function to load comics based on start and end range
    async function loadComics() {
        const res = await fetch('/api/manager');
        const comics = await res.json();
        const tbody = document.querySelector("#comicTable tbody");
        tbody.innerHTML = '';

        const start = parseInt(document.getElementById("startRange").value);
        let end = parseInt(document.getElementById("endRange").value);

        if (isNaN(start) || isNaN(end) || start < 0 || end < start || end - start > 49) {
            alert("Invalid range. Max 50 comics allowed.");
            return;
        }

        end = Math.min(end, comics.length - 1);

        for (let i = start; i <= end; i++) {
            const c = comics[i];
            tbody.innerHTML += `
                <tr id="comic-row-${c.id}">
                    <td>${c.id}</td>
                    <td><input type="text" value="${c.title}" id="title-${c.id}" disabled /></td>
                    <td><input type="number" value="${c.quantity}" id="qty-${c.id}" /></td>
                    <td>
                        <button onclick="updateQuantity(${c.id})">Update</button>
                        <button onclick="deleteComic(${c.id})">Delete</button>
                    </td>
                </tr>`;
        }
    }

    // Function to update quantity
    async function updateQuantity(id) {
        const quantity = parseInt(document.getElementById(`qty-${id}`).value);  // Get quantity input

        if (isNaN(quantity) || quantity < 0) {
            alert("Invalid quantity.");
            return;
        }

        const res = await fetch(`/api/manager/comic/${id}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(quantity)
        });

        const data = await res.json();
        if (res.ok) {
            alert("Comic quantity updated successfully.");
            loadComics();  // Reload the comic list to reflect changes
        } else {
            alert(data.message || "Error updating comic.");
        }
    }

    // Function to delete a comic
    async function deleteComic(id) {
        if (!confirm("Are you sure you want to delete this comic?")) return;

        const res = await fetch(`/api/manager/comics/${id}`, {
            method: 'DELETE'
        });

        const data = await res.json();
        alert(data.message);
        loadComics();  // Reload comics after deletion
    }

    // Function to fetch comic by ID and populate table
    async function getComicById() {
        const id = document.getElementById("comicIdInput").value;
        const res = await fetch(`/api/manager/comic/${id}`);
        const data = await res.json();

        if (res.ok) {
            const comic = data.comic;

            // Find the row with the same ID in the table or create a new row
            const tbody = document.querySelector("#comicTable tbody");
            tbody.innerHTML = '';  // Clear existing rows
            let row = document.getElementById(`comic-row-${comic.id}`);
            
            if (!row) {
                row = document.createElement('tr');
                row.id = `comic-row-${comic.id}`;
                tbody.appendChild(row);
            }

            // Fill the row with comic details
            row.innerHTML = `
                <td>${comic.id}</td>
                <td><input type="text" value="${comic.title}" id="title-${comic.id}" disabled /></td>
                <td><input type="number" value="${comic.quantity}" id="qty-${comic.id}" /></td>
                <td>
                    <button onclick="updateQuantity(${comic.id})">Update</button>
                    <button onclick="deleteComic(${comic.id})">Delete</button>
                </td>
            `;
            
            document.getElementById("comicDetails").textContent = 
                `ID: ${comic.id}, Title: ${comic.title}, Quantity: ${comic.quantity}`;
        } else {
            document.getElementById("comicDetails").textContent = data.message;
        }
    }
</script>
