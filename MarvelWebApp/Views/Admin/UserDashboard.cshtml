@{
    Layout = "~/Pages/Shared/_Layout.cshtml";
    ViewData["Title"] = "User Dashboard";
}
<section class="row mt-5 mb-5">
<div class="col-left">
        <div class="mask-group-wrapper">
           
            <img class="mask-group-icon" alt="" src="~/ManagerProfile.jpg">

        </div>
        <br>
        
        <div class="title">USER</div>
        <br><br>
        <a href="#">
            <div class="task">View Cart</div>
        </a>
        <a href="#">
            <div class="task">Collection</div>
        </a>

   

</div>
<div class="col-right">
<h1>User Dashboard</h1>

<div>
    <h2>Search Comics</h2>
    <div class="d-flex flex-row gap-2"><input type="text" id="searchTitle" placeholder="Enter comic title" />
                <button id="searchComicsBtn">Search<i class="fa-solid fa-magnifying-glass pt-1 "></i></button>
            </div>
    <div id="searchResults" class="row mt-3"></div>
</div>

<div class="mt-4">
    <h2>Shopping Cart</h2>
            <button id="viewCartBtn">View Cart<i class="fa-solid fa-cart-shopping p-1"></i></button>
    <div id="cartItems" class="mt-2"></div>
</div>


<!-- Checkout -->
<div class="mt-5">
    <h2>Checkout</h2>
    <button id="checkoutBtn" class="btn btn-success">
        Checkout <i class="fa-regular fa-credit-card"></i>
    </button>
</div>



<!-- ✅ Modal for comic details -->
<div class="modal fade  " id="comicModal" tabindex="-1" aria-labelledby="comicModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
                <div class="modal-content bg-dark bg-opacity-75 text-white">
            <div class="modal-header">
                <h5 class="modal-title" id="comicModalLabel">Comic Details</h5>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
                    <div class="modal-body row p-3" id="comicModalBody">
                <!-- Details will be filled dynamically -->
            </div>
        </div>
    </div>
</div>



<!-- ✅ Modal for Cart Details -->
@* <div class="modal fade" id="cartModal" tabindex="-1" aria-labelledby="cartModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content bg-dark bg-opacity-75 text-white">
            <div class="modal-header">
                <h5 class="modal-title" id="cartModalLabel">Your Shopping Cart</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body row p-3" id="cartItems">
                <!-- Cart items will be filled dynamically here -->
            </div>
        </div>
    </div>
</div> *@


<div class="mt-4">
    <h2>Order & Payment History</h2>
    <div class="d-flex flex-column gap-2">
        <button id="viewOrdersBtn" class="btn btn-secondary">
            View Order History <i class="fa-solid fa-box p-1"></i>
        </button>
        <button id="viewOrderDetailsBtn" class="btn btn-outline-secondary">
            View Order Details <i class="fa-solid fa-clipboard-list p-1"></i>
        </button>
        <button id="viewPaymentHistoryBtn" class="btn btn-outline-secondary">
            View Payment History <i class="fa-solid fa-money-bill-wave p-1"></i>
        </button>
    </div>

    <div id="historyContent" class="mt-2">
        <!-- Order/Payment history will be filled dynamically here -->
    </div>
</div>

<!-- ✅ Modal for Order/Payment History -->
@* <div class="modal fade" id="historyModal" tabindex="-1" aria-labelledby="historyModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content bg-dark bg-opacity-75 text-white">
            <div class="modal-header">
                <h5 class="modal-title" id="historyModalLabel">Order / Payment History</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="historyContent">
                <!-- Fetched data goes here -->
            </div>
        </div>
    </div>
</div> *@


</div>
</section>
<script>
    const apiBaseUrl = "/api/user";

    // Show modal with comic details
    async function showComicDetails(comicId)
    {
        try {
            const response = await fetch(`${apiBaseUrl}/comic/${comicId}`);
            const result = await response.json();
            const comic = result.comic;


            if (response.ok && comic) {
                let content = "";

                // Title + Thumbnail side by side
                content += `
                    <div class="col-3">
                        <img src="${comic.thumbnailURL}.jpg" alt="${comic.title}" class="me-3 rounded" style="width: 100%; height: auto;" />
                       
                    </div>
                `;

                content += `
                <div class="col-7">
                    <h5 class="mb-0">${comic.title}</h5>
                    <ul class="list-group">
                `;

                // Loop through all key-value pairs
                Object.entries(comic).forEach(([key, value]) => {
                    if (["title", "coverImageUrl", "thumbnailURL"].includes(key)) return;

                    let displayValue;

                    if (Array.isArray(value)) {
                        displayValue = value.length > 0 ? JSON.stringify(value, null, 2) : "(empty array)";
                    } else if (value === null || value === "") {
                        displayValue = "(none)";
                    } else if (typeof value === "string" && value.startsWith("http")) {
                        displayValue = `<a href="${value}" target="_blank">${value}</a>`;
                    } else {
                        displayValue = value;
                    }

                    content += `
                        <li class="list-group-item bg-dark bg-opacity-75 text-white">
                            <strong>${key}:</strong> ${displayValue}
                        </li>
                       
                    `;
                });

                content += `</ul></div>`;

                // Show in modal
                $("#comicModalBody").html(content);
                const modal = new bootstrap.Modal(document.getElementById('comicModal'));
                modal.show();
            } else {
                alert(`Error: ${result.message || "No comic data found."}`);
            }
        } catch (err) {
            console.error("Error loading comic:", err);
            alert("Failed to load comic details.");
        }
    }


    async function addToCart(comicId, quantity) {
        try {
            const response = await fetch(`${apiBaseUrl}/shopping-cart/add?comicId=${comicId}&quantity=${quantity}`, {
                method: "POST",
                headers: { "Content-Type": "application/json" }
            });

            const text = await response.text(); // Safely read raw text

            let result;
            try {
                result = JSON.parse(text);
            } catch {
                console.error("Response is not JSON:", text);
                throw new Error("Server did not return valid JSON.");
            }

            alert(response.ok ? result.message : `Error: ${result.message}`);
        } catch (err) {
            console.error(err);
            alert("Failed to add comic to cart.");
        }
    }

    $("#searchComicsBtn").on("click", async function () {
        const title = $("#searchTitle").val();
        const response = await fetch(`${apiBaseUrl}/comics/search?title=${title}`);
        const results = await response.json();
        const $results = $("#searchResults").empty();

        if (response.ok) {
            results.forEach(comic => {
                console.log(comic.id);
                const card = $(`
                    <div class="col-md-3 mb-4 gap-3">
                        <div class="card bg-dark h-100 p-2">
                            <img src="${comic.coverImageUrl}.jpg" class="card-img-top" style="cursor:pointer;" alt="${comic.title}">
                            <div class="card-body">
                                <h5 class="card-title">${comic.title}</h5>
                                <p class="card-text">Price: $${comic.price}</p>
                                <input type="number" id="quantity-${comic.id}" value="1" min="1" class="form-control mb-2">
                                <button class="add-to-cart-btn btn btn-primary" data-comic-id="${comic.id}">Add to Cart<i class="fa fa-plus p-1" aria-hidden="true"></i></button>
                            </div>
                        </div>
                    </div>
                `);
                card.find("img").on("click", () => showComicDetails(comic.id));
                card.find(".add-to-cart-btn").on("click", async function () {
                    const comicId = $(this).data("comic-id");
                    const quantity = $(`#quantity-${comicId}`).val();
                    await addToCart(comicId, quantity);
                });
                $results.append(card);
            });
        } else {
            $results.html(`<div class="alert alert-warning">${results.message}</div>`);
        }
    });


    $("#viewCartBtn").on("click", async function () {
        try {
            // Ensure API call is correct and functional
            const response = await fetch(`${apiBaseUrl}/shopping-cart`);
            const cartItems = await response.json();

            // Clear previous items from the modal body
            const $cart = $("#cartItems").empty();

            // Debugging: Ensure the cartItems are fetched properly
            console.log(cartItems);

            if (cartItems.length > 0) {
                cartItems.forEach(i => {
                    $cart.append(`
                        <div class="col-12 mb-2" style="font-family: monospace; font-size: 13px; line-height: 1.3;">
                            <div class="border-bottom pb-2">
                                <strong>${i.comicTitle}</strong>  
                                <div>Qty: ${i.quantity}  Date: ${new Date(i.createdAt).toLocaleString().slice(0, 19)}</div>
                                <div>Price: $${parseFloat(i.priceAtAdd).toFixed(2)}</div>
                            </div>
                        </div>
                    `);
                });
            } else {
                $cart.html("<p>Your cart is empty.</p>");
            }

            // Debugging: Check if modal is being shown
            console.log("Showing modal");

            // Show the modal using Bootstrap's JavaScript method
            @* var cartModal = new bootstrap.Modal(document.getElementById('cartModal'), {
                keyboard: false
            });
            cartModal.show(); *@

        } catch (err) {
            console.error("Error fetching cart items:", err);
            $("#cartItems").html("<p>Failed to load cart items.</p>");
        }
    });

    $("#checkoutBtn").on("click", async () => {
        const response = await fetch(`${apiBaseUrl}/purchase`, { method: "POST" });
        const result = await response.json();
        alert(result.message);
    });


    @* $("#viewOrdersBtn").on("click", async function () {
        try {
            const response = await fetch(`${apiBaseUrl}/orders`);
            const data = await response.json();
            console.log("🧾 Order History:", data);
        } catch (err) {
            console.error("Error fetching order history:", err);
        }
    });

    $("#viewOrderDetailsBtn").on("click", async function () {
        const orderId = 1; // 🔁 Replace with dynamic value later
        try {
            const response = await fetch(`${apiBaseUrl}/orders/${orderId}`);
            const data = await response.json();
            console.log(`🔍 Order Details (Order ID: ${orderId}):`, data);
        } catch (err) {
            console.error("Error fetching order details:", err);
        }
    });

    $("#viewPaymentHistoryBtn").on("click", async function () {
        try {
            const response = await fetch(`${apiBaseUrl}/payments`);
            const data = await response.json();
            console.log("💳 Payment History:", data);
        } catch (err) {
            console.error("Error fetching payment history:", err);
        }
    }); *@
    document.getElementById("viewOrdersBtn").addEventListener("click", async () => {
    try {
        const res = await fetch(`${apiBaseUrl}/orders`);
        const orders = await res.json();

        if (res.ok) {
            let html = `<h5>Your Orders</h5><ul class="list-group">`;
            orders.forEach(order => {
                html += `<li class="list-group-item text-dark bg-light mb-2">
                    <strong>Order ID:</strong> ${order.orderID}<br>
                    <strong>Total:</strong> $${order.totalPrice}<br>
                    <strong>Date:</strong> ${new Date(order.orderDate).toLocaleString()}
                </li>`;
            });
            html += `</ul>`;
            document.getElementById("historyContent").innerHTML = html;
            @* new bootstrap.Modal(document.getElementById("historyModal")).show(); *@
        } else {
            document.getElementById("historyContent").innerHTML = `<p>${orders.message || "No orders found."}</p>`;
        }
    } catch (err) {
        console.error(err);
    }
});

document.getElementById("viewOrderDetailsBtn").addEventListener("click", async () => {
    const orderId = prompt("Enter Order ID to view details:");
    if (!orderId) return;

    console.log("Fetching order details for Order ID:", orderId);
    try {
        const res = await fetch(`${apiBaseUrl}/orders/${orderId}`);
        console.log("Response status:", res);
        const orderDetails = await res.json();
        console.log("Order Details:", orderDetails);

        if (res.ok) {
            let html = `<h5>Order Details for Order #${orderDetails.orderID}</h5>`;

            html += `<pre>=== Order Items ===\n`;
            if (orderDetails.orderItems && orderDetails.orderItems.length > 0) {
                orderDetails.orderItems.forEach(item => {
                    html += `Comic ID: ${item.comicID}, Quantity: ${item.quantity}, Price: $${parseFloat(item.priceAtPurchase).toFixed(2)}\n`;
                });
            } else {
                html += `No items found.\n`;
            }
            html += `=== End of Order Items ===</pre>`;

            document.getElementById("historyContent").innerHTML = html;
            @* new bootstrap.Modal(document.getElementById("historyModal")).show(); *@
        } else {
            document.getElementById("historyContent").innerHTML = `<p>${orderDetails.message || "Order not found."}</p>`;
        }
    } catch (err) {
        console.error(err);
        document.getElementById("historyContent").innerHTML = `<p>Error fetching order details.</p>`;
    }
});

document.getElementById("viewPaymentHistoryBtn").addEventListener("click", async () => {
    try {
        const res = await fetch(`${apiBaseUrl}/payments`);
        const payments = await res.json();

        if (res.ok) {
            let html = `<h5>Your Payment History</h5><ul class="list-group">`;
            payments.forEach(payment => {
                html += `<li class="list-group-item text-dark bg-light mb-2">
                    <strong>Payment ID:</strong> ${payment.paymentID}<br>
                    <strong>Order ID:</strong> ${payment.orderID}<br>
                    <strong>Amount:</strong> $${payment.paymentAmount}<br>
                    <strong>Date:</strong> ${payment.paymentDate}<br>
                    <strong>Transaction ID:</strong> ${payment.transactionID}
                </li>`;
            });
            html += `</ul>`;
            document.getElementById("historyContent").innerHTML = html;
            @* new bootstrap.Modal(document.getElementById("historyModal")).show(); *@
        } else {
            document.getElementById("historyContent").innerHTML = `<p>${payments.message || "No payments found."}</p>`;
        }
    } catch (err) {
        console.error(err);
    }
});

</script>
